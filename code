

user_input=True
while user_input:
    inf=input("Please enter the file name: ")
    #Read file
    f=open(inf, 'r')
    #import pandas and numpy
    import pandas as pd
    import seaborn as sns
    import matplotlib.pyplot as plt
    from statsmodels.stats.multicomp import pairwise_tukeyhsd
    from statannotations.Annotator import Annotator


    
    #Read input csv file
    data=pd.read_csv(f,  sep=',')
    
    ####Defining Function calculating mean percentage of each cycle phase
    title_plot=input("Please enter the title for the image :  ")
    
    xlabel_plot=input("Please enter the x label for the images: ")
    ylabel_plot=input("Please enter the y label for the images: ")

    def barplot_without_statistics(df, col_name,title_plot,ylabel_plot,xlabel_plot):
        mean_cell_phase=df.groupby(by="Treatment", sort=False).agg(mean=(col_name, "mean"))
        x="Treatment"
        y=col_name
        Treatment_headers=(mean_cell_phase.index).tolist()
        ax=sns.barplot(data=df, x=x, y=y, order=Treatment_headers, ci="sd", capsize=0.1, hue=(x), dodge=False)
        ax.get_legend().set_visible(False)
        plt.xticks(rotation=-90)
        plt.yticks([0,10,20,30,40,50,60,70,80,90,100])
        plt.title(title_plot + ' '+'('+(col_name)+')')
        plt.ylabel(ylabel_plot + ' ' + '('+(col_name)+')')
        plt.xlabel(xlabel_plot)
        plt.show()
        
        return plt.show()
    
    
    def stacked_barplot(df, col_name1, col_name2, col_name3,title_plot,ylabel_plot,xlabel_plot):
        fig, ax=plt.subplots()
        mean_cell_phase_col1=df.groupby(by="Treatment", sort=False).agg(mean=(col_name1, "mean"))
        mean_cell_phase_col2=df.groupby(by="Treatment", sort=False).agg(mean=(col_name2, "mean"))
        mean_cell_phase_col3=df.groupby(by="Treatment", sort=False).agg(mean=(col_name3, "mean"))
        
              
        stacked_bar=ax.bar(df["Treatment"], df[col_name1], label=col_name1)
        stacked_bar=ax.bar(df["Treatment"], df[col_name2], bottom=df[col_name1], label=col_name2)
        stacked_bar=ax.bar(df["Treatment"], df[col_name3], bottom=df[col_name1]+df[col_name2], label=col_name3)
        #ax.legend()
        ax.legend(loc='center right', bbox_to_anchor=(1.25, 0.5))
        plt.xticks(rotation=90)
        ax.set_ylabel(ylabel_plot)
        ax.set_xlabel(xlabel_plot)
        ax.set_title(title_plot)
        plt.show()
        return plt.show()
        
       
        
    def barplot_with_statistics(df, col_name,title_plot,ylabel_plot,xlabel_plot, alpha_cutoff):
        mean_cell_phase=df.groupby(by="Treatment", sort=False).agg(mean=(col_name, "mean"))
        x="Treatment"
        y=col_name
        Treatment_headers=(mean_cell_phase.index).tolist()
        tukey=pairwise_tukeyhsd(endog=df[col_name], groups=df['Treatment'], alpha=alpha_cutoff)
        results_tukey=tukey.summary()
        tukey_dataframe=pd.DataFrame(data=results_tukey.data[1:],columns=results_tukey.data[0])
        significant_tukey=tukey_dataframe[tukey_dataframe["p-adj"]<=0.05]
        significant_tukey_pairs=significant_tukey[['group1','group2']].apply(tuple,axis=1).tolist()
        p_values_tukey=[]
        for p_values in significant_tukey["p-adj"]:
            if p_values<=0.05:
                p_values_tukey.append(p_values)
                
        ax=sns.barplot(data=df, x=x, y=y, order=Treatment_headers, ci="sd", capsize=0.1, hue=(x), dodge=False)
        ax.get_legend().set_visible(False)
        plt.xticks(rotation=90)
        plt.title(title_plot + ' '+'('+(col_name)+')')
        plt.ylabel(ylabel_plot + ' ' + '('+(col_name)+')')
        plt.xlabel(xlabel_plot)
        annotator=Annotator(ax, significant_tukey_pairs, data=df, x=x, y=y, order= Treatment_headers)
        annotator.configure(text_format="star", loc="inside")
        annotator.set_pvalues_and_annotate(p_values_tukey)
        plt.show()
        return plt.show()
    
    print("This is a stacked graph showing results for all three cycle phases in one graph")
    stacked_barplot_all=stacked_barplot(data, "G1%", "S%", "G2%", title_plot, ylabel_plot, xlabel_plot)

    
    
    statistics_input=input("There need to be atleast 3 replicates for accurate statistical testing. If you have less than 3 replicates then don't put p_values information in your graphs. Do you want p_values information in your graphs? If yes, type lowercase 'yes' otherwise type anyother key: ")
    if statistics_input=='yes':
        barplot_with_statistics_G1=barplot_with_statistics(data, "G1%", title_plot, ylabel_plot, xlabel_plot, 0.05)
        barplot_with_statistics_S=barplot_with_statistics(data,"S%", title_plot, ylabel_plot, xlabel_plot, 0.05)
        barplot_with_statistics_G2=barplot_with_statistics(data,"G2%", title_plot, ylabel_plot, xlabel_plot,0.05)
        print ("Errorbars for standard deviation.")
        print("Statistical testing based on tukey hsd results comparing mean percentages of each phase between groups (Treatments)")
    else:
        barplot_G1=barplot_without_statistics(data, "G1%", title_plot, ylabel_plot, xlabel_plot)
        
        barplot_S=barplot_without_statistics(data,"S%", title_plot, ylabel_plot, xlabel_plot)
        barplot_G2=barplot_without_statistics(data,"G2%", title_plot, ylabel_plot, xlabel_plot)
        print("Errorbars for standard deviation")

    
    
    
    continue_input=input("Type 'y' if you want to analyze next set of data if not type any other key: ")
    if continue_input=='y':
        user_input=True
    else:
        user_input=False
    f.close()
